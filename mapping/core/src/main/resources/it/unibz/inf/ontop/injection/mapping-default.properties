
# Indicates if the system will enable querying Annotation Properties defined in the ontology
# OPT: {true, false}
ontop.queryOntologyAnnotation = false

ontop.fullMetadataExtraction = false

#If true, extracts DBMetadata even if a DBMetadata object has been provided by the user
ontop.completeProvidedMetadata = true

#If false, throws an exception if the system is not able to infer the datatype from the database
# If true use default datatype (xsd:string)
ontop.inferDefaultDatatype =  false

# Let S be the data source, and if M is a set of mapping assertions, let M(S) be the graph derived by applying M to S (without ontology).
# And let dom(M(S)) (resp. range(M(S))) be all subjects (resp. objects) of some triple in M(S).
#
# Now let C be all mapping assertions with isCanonicalIRIOf as predicate,
# and let A_sub (resp(A_obj)) be all mapping assertions whose subject (resp. object) is built with a URI template, and whose predicate is not isCanonicalIRIOf.
#
# If this parameter is set to true, then for any a in A_sub,
# either dom({a}(S)) \cap range(C(S)) = \emptyset,
# or dom({a}(S)) \subseteq range(C(S))).
#
# Similarly, for any a in A_obj,
# either range({a}(S)) \cap range(C(S)) = \emptyset,
# or range({a}(S)) \subseteq range(C(S))).
ontop.isCanonicalIRIComplete =  true



##########################################
# Default implementations
##########################################

it.unibz.inf.ontop.spec.OBDASpecificationExtractor =  it.unibz.inf.ontop.spec.impl.DefaultOBDASpecificationExtractor
it.unibz.inf.ontop.spec.mapping.transformer.MappingTransformer = it.unibz.inf.ontop.spec.mapping.transformer.impl.DefaultMappingTransformer
it.unibz.inf.ontop.spec.mapping.transformer.MappingVariableNameNormalizer = it.unibz.inf.ontop.spec.mapping.transformer.impl.MappingVariableNameNormalizerImpl
it.unibz.inf.ontop.spec.mapping.transformer.MappingSaturator = it.unibz.inf.ontop.spec.mapping.transformer.impl.LegacyMappingSaturator
it.unibz.inf.ontop.spec.mapping.transformer.MappingCanonicalTransformer =it.unibz.inf.ontop.spec.mapping.transformer.impl.MappingCanonicalTransformerImpl
it.unibz.inf.ontop.spec.mapping.transformer.ABoxFactIntoMappingConverter =it.unibz.inf.ontop.spec.mapping.transformer.impl.LegacyABoxFactIntoMappingConverter
it.unibz.inf.ontop.spec.mapping.transformer.MappingMerger = it.unibz.inf.ontop.spec.mapping.transformer.impl.MappingMergerImpl
it.unibz.inf.ontop.spec.mapping.transformer.MappingDatatypeFiller = it.unibz.inf.ontop.spec.mapping.transformer.impl.LegacyMappingDatatypeFiller
it.unibz.inf.ontop.spec.mapping.transformer.MappingSameAsInverseRewriter = it.unibz.inf.ontop.spec.mapping.transformer.impl.MappingSameAsInverseRewriterImpl
it.unibz.inf.ontop.spec.mapping.validation.MappingOntologyComplianceValidator = it.unibz.inf.ontop.spec.mapping.validation.impl.MappingOntologyComplianceValidatorImpl
it.unibz.inf.ontop.spec.mapping.MappingWithProvenance = it.unibz.inf.ontop.spec.mapping.impl.MappingWithProvenanceImpl
it.unibz.inf.ontop.datalog.Datalog2QueryMappingConverter = it.unibz.inf.ontop.datalog.impl.Datalog2QueryMappingConverterImpl
it.unibz.inf.ontop.datalog.QueryUnionSplitter = it.unibz.inf.ontop.datalog.impl.QueryUnionSplitterImpl
it.unibz.inf.ontop.spec.mapping.transformer.MappingCQCOptimizer = it.unibz.inf.ontop.spec.mapping.transformer.impl.MappingCQCOptimizerImpl

# To be replaced by a proper implementation
it.unibz.inf.ontop.spec.MappingExtractor = it.unibz.inf.ontop.spec.impl.FakeMappingExtractor